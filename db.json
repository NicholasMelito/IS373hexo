{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1728225940321},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1728225947955},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1728225948486},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1728225948604},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1728225948482},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1728225948230},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1728225948355},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1728225948288},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1728225948361},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1728225948380},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1728225948385},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1728225948608},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1728225948410},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1728225948610},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1728225948625},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1728225948628},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1728225948631},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1728225948636},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1728225948633},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1728225948638},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1728225948645},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1728225948642},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1728225948640},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1728225948647},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1728225948649},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1728225948652},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1728225948657},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1728225948655},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1728225948660},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1728225948662},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1728225948664},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1728225948666},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1728225948668},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1728225948670},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1728225948672},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1728225948674},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1728225948676},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1728225948679},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1728225948681},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1728225948682},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1728225948685},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1728225948688},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1728225948690},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1728225948692},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1728225948450},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1728225948095},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1728225948135},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1728225948164},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1728225948246},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1728225948326},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1728225948308},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1728225948335},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1728225948342},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1728225948349},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1728225948368},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1728225948397},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1728225948202},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1728225948276},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1728225948392},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1728225948405},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1728225948415},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1728225948495},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1728225948500},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1728225948601},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1728225948012},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1728225948478},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1728225948265},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1728225948298},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1728225948317},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1728225948374},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1728225948401},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1728225948420},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1728225948506},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1728225948511},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1728225948515},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1728225948541},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1728225948553},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1728225948557},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1728225948589},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1728225948593},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1728225948585},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1728225948597},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1728225948549},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1728225948562},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1728225948474},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1728225948465},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1728225948446},{"_id":"source/_posts/.git","hash":"bb130f26548d4bfae2a47b7b2bfb3ea35c45d076","modified":1729046276165},{"_id":"source/_posts/DIfference_Containerization&Virtualization.md","hash":"af09735a22943d1dd02ca19182797d956895aaf0","modified":1729046997992},{"_id":"source/_posts/Containerization&Virtualization.md","hash":"bde363f7853ae6bfd77aba85c0c070244b676a5e","modified":1729046997992},{"_id":"source/_posts/Docker_Cheat_Sheet","hash":"83375e45c655031483e812d5f6320e1634761055","modified":1729046997992},{"_id":"source/_posts/README.md","hash":"6fd58a25b8233463487df6c3c6bcec3aff85f49b","modified":1729046997992},{"_id":"source/_posts/Difference_Between_Kuber&Docker.md","hash":"b7b4bfe8c67b9825f667f4b6f865cccfdcea4d4b","modified":1729046997992},{"_id":"source/_posts/Kubernetes_Cheat_Sheet","hash":"490351ef630277af6c45bc36dd3cda733f2bf2f5","modified":1729046997992},{"_id":"source/_posts/What's_A_Kernel.md","hash":"ec91fa1fa9d6c173621fa5b7ac5fd5c33fb67ddd","modified":1729046997992},{"_id":"source/_posts/WebsiteDraft","hash":"62d4c90641815322c3fccc1eb8baac3be4c3c24b","modified":1729046997992},{"_id":"source/_posts/What_is_Docker.md","hash":"ddc4c331e4ab8bd0da8f353292f316d4680e65e6","modified":1729046997992},{"_id":"source/_posts/What_Is_Kubernetes.md","hash":"cd1eb2a4f140d46b4690ca6ecf04d79e84a30877","modified":1729046997992},{"_id":"source/_posts/docker.md","hash":"b6dac5821f924becd4feddb9d113bb6b51b9dd29","modified":1729046997992}],"Category":[],"Data":[],"Page":[],"Post":[{"_content":"Containerization and virtualization are both techniques used to create isolated environments for applications, but they differ in how they operate and what they provide.\n\nVirtualization\n- **Layer of Abstraction**: Virtualization involves creating virtual machines (VMs) that emulate entire physical computers. Each VM runs its own operating system (OS) on top of a hypervisor, which manages the hardware resources.\n- **Resource Usage**: Because each VM includes a full OS, they typically consume more resources (CPU, memory, and storage) compared to containers.\n- **Isolation**: VMs provide strong isolation since each one is fully independent, with its own kernel.\n- **Use Case**: Best suited for running multiple different operating systems or applications that require complete separation.\n\nContainerization\n- **Layer of Abstraction**: Containerization uses a shared OS kernel to run multiple applications in isolated user spaces called containers. Containers are lightweight and share the host OS.\n- **Resource Usage**: Containers are more efficient in terms of resource usage since they do not require a full OS for each instance, making them faster to start and more efficient to run.\n- **Isolation**: While containers provide a level of isolation, they share the same kernel, which can make them less secure than VMs in certain scenarios.\n- **Use Case**: Ideal for microservices architectures, rapid deployment, and environments where quick scaling and resource efficiency are critical.\n\n![-](https://www.netapp.com/media/container-vs-vm-inline1_tcm19-82163.png?v=85344?v=85344)\n\nIn summary, virtualization is more heavyweight and provides strong isolation, while containerization is lightweight and efficient, allowing for faster development and deployment cycles.\n[What is Docker?](https://github.com/NicholasMelito/IS373/wiki/What-is-Docker-and-how-to-install!)\n","source":"_posts/DIfference_Containerization&Virtualization.md","raw":"Containerization and virtualization are both techniques used to create isolated environments for applications, but they differ in how they operate and what they provide.\n\nVirtualization\n- **Layer of Abstraction**: Virtualization involves creating virtual machines (VMs) that emulate entire physical computers. Each VM runs its own operating system (OS) on top of a hypervisor, which manages the hardware resources.\n- **Resource Usage**: Because each VM includes a full OS, they typically consume more resources (CPU, memory, and storage) compared to containers.\n- **Isolation**: VMs provide strong isolation since each one is fully independent, with its own kernel.\n- **Use Case**: Best suited for running multiple different operating systems or applications that require complete separation.\n\nContainerization\n- **Layer of Abstraction**: Containerization uses a shared OS kernel to run multiple applications in isolated user spaces called containers. Containers are lightweight and share the host OS.\n- **Resource Usage**: Containers are more efficient in terms of resource usage since they do not require a full OS for each instance, making them faster to start and more efficient to run.\n- **Isolation**: While containers provide a level of isolation, they share the same kernel, which can make them less secure than VMs in certain scenarios.\n- **Use Case**: Ideal for microservices architectures, rapid deployment, and environments where quick scaling and resource efficiency are critical.\n\n![-](https://www.netapp.com/media/container-vs-vm-inline1_tcm19-82163.png?v=85344?v=85344)\n\nIn summary, virtualization is more heavyweight and provides strong isolation, while containerization is lightweight and efficient, allowing for faster development and deployment cycles.\n[What is Docker?](https://github.com/NicholasMelito/IS373/wiki/What-is-Docker-and-how-to-install!)\n","slug":"DIfference_Containerization&Virtualization","published":1,"date":"2024-10-16T02:49:57.992Z","updated":"2024-10-16T02:49:57.992Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cm2b9z34v00009cv37t4xfjkz","content":"<p>Containerization and virtualization are both techniques used to create isolated environments for applications, but they differ in how they operate and what they provide.</p>\n<p>Virtualization</p>\n<ul>\n<li><strong>Layer of Abstraction</strong>: Virtualization involves creating virtual machines (VMs) that emulate entire physical computers. Each VM runs its own operating system (OS) on top of a hypervisor, which manages the hardware resources.</li>\n<li><strong>Resource Usage</strong>: Because each VM includes a full OS, they typically consume more resources (CPU, memory, and storage) compared to containers.</li>\n<li><strong>Isolation</strong>: VMs provide strong isolation since each one is fully independent, with its own kernel.</li>\n<li><strong>Use Case</strong>: Best suited for running multiple different operating systems or applications that require complete separation.</li>\n</ul>\n<p>Containerization</p>\n<ul>\n<li><strong>Layer of Abstraction</strong>: Containerization uses a shared OS kernel to run multiple applications in isolated user spaces called containers. Containers are lightweight and share the host OS.</li>\n<li><strong>Resource Usage</strong>: Containers are more efficient in terms of resource usage since they do not require a full OS for each instance, making them faster to start and more efficient to run.</li>\n<li><strong>Isolation</strong>: While containers provide a level of isolation, they share the same kernel, which can make them less secure than VMs in certain scenarios.</li>\n<li><strong>Use Case</strong>: Ideal for microservices architectures, rapid deployment, and environments where quick scaling and resource efficiency are critical.</li>\n</ul>\n<p><img src=\"https://www.netapp.com/media/container-vs-vm-inline1_tcm19-82163.png?v=85344?v=85344\" alt=\"-\"></p>\n<p>In summary, virtualization is more heavyweight and provides strong isolation, while containerization is lightweight and efficient, allowing for faster development and deployment cycles.<br><a href=\"https://github.com/NicholasMelito/IS373/wiki/What-is-Docker-and-how-to-install!\">What is Docker?</a></p>\n","excerpt":"","more":"<p>Containerization and virtualization are both techniques used to create isolated environments for applications, but they differ in how they operate and what they provide.</p>\n<p>Virtualization</p>\n<ul>\n<li><strong>Layer of Abstraction</strong>: Virtualization involves creating virtual machines (VMs) that emulate entire physical computers. Each VM runs its own operating system (OS) on top of a hypervisor, which manages the hardware resources.</li>\n<li><strong>Resource Usage</strong>: Because each VM includes a full OS, they typically consume more resources (CPU, memory, and storage) compared to containers.</li>\n<li><strong>Isolation</strong>: VMs provide strong isolation since each one is fully independent, with its own kernel.</li>\n<li><strong>Use Case</strong>: Best suited for running multiple different operating systems or applications that require complete separation.</li>\n</ul>\n<p>Containerization</p>\n<ul>\n<li><strong>Layer of Abstraction</strong>: Containerization uses a shared OS kernel to run multiple applications in isolated user spaces called containers. Containers are lightweight and share the host OS.</li>\n<li><strong>Resource Usage</strong>: Containers are more efficient in terms of resource usage since they do not require a full OS for each instance, making them faster to start and more efficient to run.</li>\n<li><strong>Isolation</strong>: While containers provide a level of isolation, they share the same kernel, which can make them less secure than VMs in certain scenarios.</li>\n<li><strong>Use Case</strong>: Ideal for microservices architectures, rapid deployment, and environments where quick scaling and resource efficiency are critical.</li>\n</ul>\n<p><img src=\"https://www.netapp.com/media/container-vs-vm-inline1_tcm19-82163.png?v=85344?v=85344\" alt=\"-\"></p>\n<p>In summary, virtualization is more heavyweight and provides strong isolation, while containerization is lightweight and efficient, allowing for faster development and deployment cycles.<br><a href=\"https://github.com/NicholasMelito/IS373/wiki/What-is-Docker-and-how-to-install!\">What is Docker?</a></p>\n"},{"_content":"Simply put, a Kernel is a computer program that acts as the core of an operating system, bridges the gap between the OS and the computer's hardware.  \n\nIt is responsible for the tasks, including optimizing resources, Handling Requests, Preventing conflicts,Enable Multitasking and Assign Memory.\n![-](https://static.wikia.nocookie.net/cellsatwork/images/9/91/AE3803.png/revision/latest?cb=20180719135020)\n[Containerization & Virtualization](https://github.com/NicholasMelito/IS373/wiki/What-is-Containerization-and-What-is-Virtualization%3F)\n","source":"_posts/What's_A_Kernel.md","raw":"Simply put, a Kernel is a computer program that acts as the core of an operating system, bridges the gap between the OS and the computer's hardware.  \n\nIt is responsible for the tasks, including optimizing resources, Handling Requests, Preventing conflicts,Enable Multitasking and Assign Memory.\n![-](https://static.wikia.nocookie.net/cellsatwork/images/9/91/AE3803.png/revision/latest?cb=20180719135020)\n[Containerization & Virtualization](https://github.com/NicholasMelito/IS373/wiki/What-is-Containerization-and-What-is-Virtualization%3F)\n","slug":"What's_A_Kernel","published":1,"date":"2024-10-16T02:49:57.992Z","updated":"2024-10-16T02:49:57.992Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cm2b9z35000019cv3c5m9gh3z","content":"<p>Simply put, a Kernel is a computer program that acts as the core of an operating system, bridges the gap between the OS and the computer’s hardware.  </p>\n<p>It is responsible for the tasks, including optimizing resources, Handling Requests, Preventing conflicts,Enable Multitasking and Assign Memory.<br><img src=\"https://static.wikia.nocookie.net/cellsatwork/images/9/91/AE3803.png/revision/latest?cb=20180719135020\" alt=\"-\"><br><a href=\"https://github.com/NicholasMelito/IS373/wiki/What-is-Containerization-and-What-is-Virtualization%3F\">Containerization &amp; Virtualization</a></p>\n","excerpt":"","more":"<p>Simply put, a Kernel is a computer program that acts as the core of an operating system, bridges the gap between the OS and the computer’s hardware.  </p>\n<p>It is responsible for the tasks, including optimizing resources, Handling Requests, Preventing conflicts,Enable Multitasking and Assign Memory.<br><img src=\"https://static.wikia.nocookie.net/cellsatwork/images/9/91/AE3803.png/revision/latest?cb=20180719135020\" alt=\"-\"><br><a href=\"https://github.com/NicholasMelito/IS373/wiki/What-is-Containerization-and-What-is-Virtualization%3F\">Containerization &amp; Virtualization</a></p>\n"},{"_content":"Tutorial!!\n\n\nWelcome to our IS373 Page.  \n\nHere you can be able to access the following pages!!\n\n[What is a Kernel??](https://github.com/NicholasMelito/IS373/wiki/What-Is-A-Kernel%3F%3F)\n\n[What is Containerization and What is Virtualization? ](https://github.com/NicholasMelito/IS373/wiki/What-is-Containerization-and-What-is-Virtualization%3F)\n\n[Containerization Vs Virtualization](https://github.com/NicholasMelito/IS373/wiki/The-Difference-Between-Containerization-and-Virtualization)\n\n[What is Docker?](https://github.com/NicholasMelito/IS373/wiki/What-is-Docker-and-how-to-install!)\n\n[What is Kubernetes?](https://github.com/NicholasMelito/IS373/wiki/What-is-Kubernetes-and-can-i-install-on-my-pc%3F)\n\n[Docker VS Kubernetes](https://github.com/NicholasMelito/IS373/wiki/What-is-the-difference-between-Kubernetes-and-Docker%3F%3F)\n","source":"_posts/README.md","raw":"Tutorial!!\n\n\nWelcome to our IS373 Page.  \n\nHere you can be able to access the following pages!!\n\n[What is a Kernel??](https://github.com/NicholasMelito/IS373/wiki/What-Is-A-Kernel%3F%3F)\n\n[What is Containerization and What is Virtualization? ](https://github.com/NicholasMelito/IS373/wiki/What-is-Containerization-and-What-is-Virtualization%3F)\n\n[Containerization Vs Virtualization](https://github.com/NicholasMelito/IS373/wiki/The-Difference-Between-Containerization-and-Virtualization)\n\n[What is Docker?](https://github.com/NicholasMelito/IS373/wiki/What-is-Docker-and-how-to-install!)\n\n[What is Kubernetes?](https://github.com/NicholasMelito/IS373/wiki/What-is-Kubernetes-and-can-i-install-on-my-pc%3F)\n\n[Docker VS Kubernetes](https://github.com/NicholasMelito/IS373/wiki/What-is-the-difference-between-Kubernetes-and-Docker%3F%3F)\n","slug":"README","published":1,"date":"2024-10-16T02:49:57.992Z","updated":"2024-10-16T02:49:57.992Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cm2b9z35200029cv35k6846jk","content":"<p>Tutorial!!</p>\n<p>Welcome to our IS373 Page.  </p>\n<p>Here you can be able to access the following pages!!</p>\n<p><a href=\"https://github.com/NicholasMelito/IS373/wiki/What-Is-A-Kernel%3F%3F\">What is a Kernel??</a></p>\n<p><a href=\"https://github.com/NicholasMelito/IS373/wiki/What-is-Containerization-and-What-is-Virtualization%3F\">What is Containerization and What is Virtualization? </a></p>\n<p><a href=\"https://github.com/NicholasMelito/IS373/wiki/The-Difference-Between-Containerization-and-Virtualization\">Containerization Vs Virtualization</a></p>\n<p><a href=\"https://github.com/NicholasMelito/IS373/wiki/What-is-Docker-and-how-to-install!\">What is Docker?</a></p>\n<p><a href=\"https://github.com/NicholasMelito/IS373/wiki/What-is-Kubernetes-and-can-i-install-on-my-pc%3F\">What is Kubernetes?</a></p>\n<p><a href=\"https://github.com/NicholasMelito/IS373/wiki/What-is-the-difference-between-Kubernetes-and-Docker%3F%3F\">Docker VS Kubernetes</a></p>\n","excerpt":"","more":"<p>Tutorial!!</p>\n<p>Welcome to our IS373 Page.  </p>\n<p>Here you can be able to access the following pages!!</p>\n<p><a href=\"https://github.com/NicholasMelito/IS373/wiki/What-Is-A-Kernel%3F%3F\">What is a Kernel??</a></p>\n<p><a href=\"https://github.com/NicholasMelito/IS373/wiki/What-is-Containerization-and-What-is-Virtualization%3F\">What is Containerization and What is Virtualization? </a></p>\n<p><a href=\"https://github.com/NicholasMelito/IS373/wiki/The-Difference-Between-Containerization-and-Virtualization\">Containerization Vs Virtualization</a></p>\n<p><a href=\"https://github.com/NicholasMelito/IS373/wiki/What-is-Docker-and-how-to-install!\">What is Docker?</a></p>\n<p><a href=\"https://github.com/NicholasMelito/IS373/wiki/What-is-Kubernetes-and-can-i-install-on-my-pc%3F\">What is Kubernetes?</a></p>\n<p><a href=\"https://github.com/NicholasMelito/IS373/wiki/What-is-the-difference-between-Kubernetes-and-Docker%3F%3F\">Docker VS Kubernetes</a></p>\n"},{"_content":"Kubernetes and Docker are often mentioned together in the context of containerized applications, but they serve different purposes and address different aspects of containerization.\n\n![Kubernetes VS Docker](https://www.bretfisher.com/content/images/size/w600/2022/02/kubernetes-vs-docker-1-1.png)\n\n1. **Docker**:\n   - **Purpose**: Docker is a platform for developing, shipping, and running applications in containers. Containers are lightweight, standalone, and executable packages that include everything needed to run a piece of software: the code, runtime, libraries, and dependencies.\n   - **Components**:\n     - **Docker Engine**: The runtime that allows you to build and run Docker containers.\n     - **Docker Hub**: A registry where you can find and share Docker images.\n     - **Docker Compose**: A tool for defining and running multi-container Docker applications using a `docker-compose.yml` file.\n   - **Focus**: Docker primarily deals with the creation, deployment, and management of containers.\n\n2. **Kubernetes**:\n   - **Purpose**: Kubernetes is an orchestration platform for automating the deployment, scaling, and management of containerized applications across a cluster of machines.\n   - **Components**:\n     - **Kubelet**: An agent that runs on each node in the Kubernetes cluster, ensuring that containers are running in a Pod.\n     - **Kubectl**: A command-line tool for interacting with the Kubernetes cluster.\n     - **Master Components**: Includes API server, scheduler, and controller manager, which manage the state of the cluster.\n   - **Focus**: Kubernetes provides advanced features like load balancing, service discovery, rolling updates, and scaling. It manages the lifecycle of containers and ensures high availability and reliability of applications.\n\n**In Summary**:\n- **Docker** is used for creating and running individual containers.\n- **Kubernetes** is used for managing and orchestrating clusters of containers, ensuring that they run efficiently and reliably across multiple machines.\n\nIn practice, Docker containers are often used with Kubernetes to provide containerized applications that Kubernetes can then manage and orchestrate.\n","source":"_posts/Difference_Between_Kuber&Docker.md","raw":"Kubernetes and Docker are often mentioned together in the context of containerized applications, but they serve different purposes and address different aspects of containerization.\n\n![Kubernetes VS Docker](https://www.bretfisher.com/content/images/size/w600/2022/02/kubernetes-vs-docker-1-1.png)\n\n1. **Docker**:\n   - **Purpose**: Docker is a platform for developing, shipping, and running applications in containers. Containers are lightweight, standalone, and executable packages that include everything needed to run a piece of software: the code, runtime, libraries, and dependencies.\n   - **Components**:\n     - **Docker Engine**: The runtime that allows you to build and run Docker containers.\n     - **Docker Hub**: A registry where you can find and share Docker images.\n     - **Docker Compose**: A tool for defining and running multi-container Docker applications using a `docker-compose.yml` file.\n   - **Focus**: Docker primarily deals with the creation, deployment, and management of containers.\n\n2. **Kubernetes**:\n   - **Purpose**: Kubernetes is an orchestration platform for automating the deployment, scaling, and management of containerized applications across a cluster of machines.\n   - **Components**:\n     - **Kubelet**: An agent that runs on each node in the Kubernetes cluster, ensuring that containers are running in a Pod.\n     - **Kubectl**: A command-line tool for interacting with the Kubernetes cluster.\n     - **Master Components**: Includes API server, scheduler, and controller manager, which manage the state of the cluster.\n   - **Focus**: Kubernetes provides advanced features like load balancing, service discovery, rolling updates, and scaling. It manages the lifecycle of containers and ensures high availability and reliability of applications.\n\n**In Summary**:\n- **Docker** is used for creating and running individual containers.\n- **Kubernetes** is used for managing and orchestrating clusters of containers, ensuring that they run efficiently and reliably across multiple machines.\n\nIn practice, Docker containers are often used with Kubernetes to provide containerized applications that Kubernetes can then manage and orchestrate.\n","slug":"Difference_Between_Kuber&Docker","published":1,"date":"2024-10-16T02:49:57.992Z","updated":"2024-10-16T02:49:57.992Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cm2b9z35200039cv38uk890uj","content":"<p>Kubernetes and Docker are often mentioned together in the context of containerized applications, but they serve different purposes and address different aspects of containerization.</p>\n<p><img src=\"https://www.bretfisher.com/content/images/size/w600/2022/02/kubernetes-vs-docker-1-1.png\" alt=\"Kubernetes VS Docker\"></p>\n<ol>\n<li><p><strong>Docker</strong>:</p>\n<ul>\n<li><strong>Purpose</strong>: Docker is a platform for developing, shipping, and running applications in containers. Containers are lightweight, standalone, and executable packages that include everything needed to run a piece of software: the code, runtime, libraries, and dependencies.</li>\n<li><strong>Components</strong>:<ul>\n<li><strong>Docker Engine</strong>: The runtime that allows you to build and run Docker containers.</li>\n<li><strong>Docker Hub</strong>: A registry where you can find and share Docker images.</li>\n<li><strong>Docker Compose</strong>: A tool for defining and running multi-container Docker applications using a <code>docker-compose.yml</code> file.</li>\n</ul>\n</li>\n<li><strong>Focus</strong>: Docker primarily deals with the creation, deployment, and management of containers.</li>\n</ul>\n</li>\n<li><p><strong>Kubernetes</strong>:</p>\n<ul>\n<li><strong>Purpose</strong>: Kubernetes is an orchestration platform for automating the deployment, scaling, and management of containerized applications across a cluster of machines.</li>\n<li><strong>Components</strong>:<ul>\n<li><strong>Kubelet</strong>: An agent that runs on each node in the Kubernetes cluster, ensuring that containers are running in a Pod.</li>\n<li><strong>Kubectl</strong>: A command-line tool for interacting with the Kubernetes cluster.</li>\n<li><strong>Master Components</strong>: Includes API server, scheduler, and controller manager, which manage the state of the cluster.</li>\n</ul>\n</li>\n<li><strong>Focus</strong>: Kubernetes provides advanced features like load balancing, service discovery, rolling updates, and scaling. It manages the lifecycle of containers and ensures high availability and reliability of applications.</li>\n</ul>\n</li>\n</ol>\n<p><strong>In Summary</strong>:</p>\n<ul>\n<li><strong>Docker</strong> is used for creating and running individual containers.</li>\n<li><strong>Kubernetes</strong> is used for managing and orchestrating clusters of containers, ensuring that they run efficiently and reliably across multiple machines.</li>\n</ul>\n<p>In practice, Docker containers are often used with Kubernetes to provide containerized applications that Kubernetes can then manage and orchestrate.</p>\n","excerpt":"","more":"<p>Kubernetes and Docker are often mentioned together in the context of containerized applications, but they serve different purposes and address different aspects of containerization.</p>\n<p><img src=\"https://www.bretfisher.com/content/images/size/w600/2022/02/kubernetes-vs-docker-1-1.png\" alt=\"Kubernetes VS Docker\"></p>\n<ol>\n<li><p><strong>Docker</strong>:</p>\n<ul>\n<li><strong>Purpose</strong>: Docker is a platform for developing, shipping, and running applications in containers. Containers are lightweight, standalone, and executable packages that include everything needed to run a piece of software: the code, runtime, libraries, and dependencies.</li>\n<li><strong>Components</strong>:<ul>\n<li><strong>Docker Engine</strong>: The runtime that allows you to build and run Docker containers.</li>\n<li><strong>Docker Hub</strong>: A registry where you can find and share Docker images.</li>\n<li><strong>Docker Compose</strong>: A tool for defining and running multi-container Docker applications using a <code>docker-compose.yml</code> file.</li>\n</ul>\n</li>\n<li><strong>Focus</strong>: Docker primarily deals with the creation, deployment, and management of containers.</li>\n</ul>\n</li>\n<li><p><strong>Kubernetes</strong>:</p>\n<ul>\n<li><strong>Purpose</strong>: Kubernetes is an orchestration platform for automating the deployment, scaling, and management of containerized applications across a cluster of machines.</li>\n<li><strong>Components</strong>:<ul>\n<li><strong>Kubelet</strong>: An agent that runs on each node in the Kubernetes cluster, ensuring that containers are running in a Pod.</li>\n<li><strong>Kubectl</strong>: A command-line tool for interacting with the Kubernetes cluster.</li>\n<li><strong>Master Components</strong>: Includes API server, scheduler, and controller manager, which manage the state of the cluster.</li>\n</ul>\n</li>\n<li><strong>Focus</strong>: Kubernetes provides advanced features like load balancing, service discovery, rolling updates, and scaling. It manages the lifecycle of containers and ensures high availability and reliability of applications.</li>\n</ul>\n</li>\n</ol>\n<p><strong>In Summary</strong>:</p>\n<ul>\n<li><strong>Docker</strong> is used for creating and running individual containers.</li>\n<li><strong>Kubernetes</strong> is used for managing and orchestrating clusters of containers, ensuring that they run efficiently and reliably across multiple machines.</li>\n</ul>\n<p>In practice, Docker containers are often used with Kubernetes to provide containerized applications that Kubernetes can then manage and orchestrate.</p>\n"},{"_content":"Containerization is a technology that allows you to package applications and their dependencies into isolated units called containers. Here’s a closer look at its key features, benefits, and use cases:\n\n### Key Features of Containerization\n\n1. **Containers**: These are lightweight, executable units that include everything needed to run an application—code, runtime, libraries, and system tools—ensuring that it works consistently across different environments.\n\n2. **Shared OS Kernel**: Unlike virtual machines, containers share the host operating system's kernel. This makes them more efficient in terms of resource usage.\n\n3. **Isolation**: Each container runs in its own isolated environment, ensuring that applications do not interfere with one another while still sharing the same OS.\n\n4. **Portability**: Containers can run consistently across various environments—development, testing, and production—regardless of the underlying infrastructure.\n\n Benefits of Containerization\n\n- **Lightweight**: Containers are smaller and start up faster than virtual machines since they don't require a full OS for each instance.\n- **Scalability**: Easy to scale applications up or down quickly, facilitating rapid deployment.\n- **Efficiency**: Better resource utilization allows more applications to run on the same hardware compared to VMs.\n- **DevOps Integration**: Containers fit well into continuous integration and continuous deployment (CI/CD) workflows, enabling faster development cycles.\n\n Use Cases\n\n- **Microservices Architecture**: Containers are ideal for deploying microservices, where applications are broken down into smaller, independently deployable services.\n- **Cloud-Native Applications**: Perfect for applications designed to run in cloud environments, leveraging the cloud’s elasticity and scalability.\n- **Development and Testing**: Developers can create and test applications in consistent environments, reducing “works on my machine” issues.\n- **Multi-Cloud and Hybrid Environments**: Containers facilitate moving applications seamlessly between different cloud providers and on-premises systems.\n\n Popular Containerization Tools\n\n- **Docker**: The most widely used platform for building, running, and managing containers.\n- **Kubernetes**: An orchestration tool that automates the deployment, scaling, and management of containerized applications.\n\nIn summary, containerization streamlines application deployment and management by encapsulating applications in lightweight, portable containers, making them ideal for modern software development practices.\n\n\nVirtualization is a technology that allows you to create virtual versions of physical computing resources, such as servers, storage devices, and network resources. Here’s a breakdown of its key components and concepts:\n\n### Key Components of Virtualization\n\n1. **Hypervisor**: The core component that enables virtualization. It sits between the hardware and the operating systems, managing VMs. There are two types:\n   - **Type 1 (Bare-metal)**: Runs directly on the hardware (e.g., VMware ESXi, Microsoft Hyper-V).\n   - **Type 2 (Hosted)**: Runs on top of a conventional operating system (e.g., VMware Workstation, Oracle VirtualBox).\n\n2. **Virtual Machines (VMs)**: These are isolated environments that act like independent computers. Each VM has its own operating system and applications, but they share the underlying physical hardware.\n\n3. **Guest OS**: The operating system running inside a VM. Each VM can run a different OS, allowing for diverse applications on a single physical server.\n\nBenefits of Virtualization\n\n- **Resource Efficiency**: Multiple VMs can run on a single physical server, maximizing hardware utilization.\n- **Isolation**: VMs are isolated from each other, so issues in one VM don’t affect others.\n- **Scalability**: You can easily create, clone, or delete VMs as needed.\n- **Cost Savings**: Reduces hardware costs and energy consumption by consolidating servers.\n- **Flexibility and Portability**: VMs can be moved between hosts and easily backed up or replicated.\n\n Use Cases\n\n- **Server Consolidation**: Running multiple applications on fewer physical servers.\n- **Development and Testing**: Creating isolated environments for testing software without affecting production systems.\n- **Disaster Recovery**: Rapidly restoring systems and data using VM snapshots and backups.\n\nIn essence, virtualization enables more efficient use of hardware, improved scalability, and better resource management in IT environments.\n\nTo understand more about the differences between containerization and virtualization, check out the link:\n[Containerization VS Virtualization](https://github.com/NicholasMelito/IS373/wiki/The-Differences-Between-Containerization-&-Virtualization)\n","source":"_posts/Containerization&Virtualization.md","raw":"Containerization is a technology that allows you to package applications and their dependencies into isolated units called containers. Here’s a closer look at its key features, benefits, and use cases:\n\n### Key Features of Containerization\n\n1. **Containers**: These are lightweight, executable units that include everything needed to run an application—code, runtime, libraries, and system tools—ensuring that it works consistently across different environments.\n\n2. **Shared OS Kernel**: Unlike virtual machines, containers share the host operating system's kernel. This makes them more efficient in terms of resource usage.\n\n3. **Isolation**: Each container runs in its own isolated environment, ensuring that applications do not interfere with one another while still sharing the same OS.\n\n4. **Portability**: Containers can run consistently across various environments—development, testing, and production—regardless of the underlying infrastructure.\n\n Benefits of Containerization\n\n- **Lightweight**: Containers are smaller and start up faster than virtual machines since they don't require a full OS for each instance.\n- **Scalability**: Easy to scale applications up or down quickly, facilitating rapid deployment.\n- **Efficiency**: Better resource utilization allows more applications to run on the same hardware compared to VMs.\n- **DevOps Integration**: Containers fit well into continuous integration and continuous deployment (CI/CD) workflows, enabling faster development cycles.\n\n Use Cases\n\n- **Microservices Architecture**: Containers are ideal for deploying microservices, where applications are broken down into smaller, independently deployable services.\n- **Cloud-Native Applications**: Perfect for applications designed to run in cloud environments, leveraging the cloud’s elasticity and scalability.\n- **Development and Testing**: Developers can create and test applications in consistent environments, reducing “works on my machine” issues.\n- **Multi-Cloud and Hybrid Environments**: Containers facilitate moving applications seamlessly between different cloud providers and on-premises systems.\n\n Popular Containerization Tools\n\n- **Docker**: The most widely used platform for building, running, and managing containers.\n- **Kubernetes**: An orchestration tool that automates the deployment, scaling, and management of containerized applications.\n\nIn summary, containerization streamlines application deployment and management by encapsulating applications in lightweight, portable containers, making them ideal for modern software development practices.\n\n\nVirtualization is a technology that allows you to create virtual versions of physical computing resources, such as servers, storage devices, and network resources. Here’s a breakdown of its key components and concepts:\n\n### Key Components of Virtualization\n\n1. **Hypervisor**: The core component that enables virtualization. It sits between the hardware and the operating systems, managing VMs. There are two types:\n   - **Type 1 (Bare-metal)**: Runs directly on the hardware (e.g., VMware ESXi, Microsoft Hyper-V).\n   - **Type 2 (Hosted)**: Runs on top of a conventional operating system (e.g., VMware Workstation, Oracle VirtualBox).\n\n2. **Virtual Machines (VMs)**: These are isolated environments that act like independent computers. Each VM has its own operating system and applications, but they share the underlying physical hardware.\n\n3. **Guest OS**: The operating system running inside a VM. Each VM can run a different OS, allowing for diverse applications on a single physical server.\n\nBenefits of Virtualization\n\n- **Resource Efficiency**: Multiple VMs can run on a single physical server, maximizing hardware utilization.\n- **Isolation**: VMs are isolated from each other, so issues in one VM don’t affect others.\n- **Scalability**: You can easily create, clone, or delete VMs as needed.\n- **Cost Savings**: Reduces hardware costs and energy consumption by consolidating servers.\n- **Flexibility and Portability**: VMs can be moved between hosts and easily backed up or replicated.\n\n Use Cases\n\n- **Server Consolidation**: Running multiple applications on fewer physical servers.\n- **Development and Testing**: Creating isolated environments for testing software without affecting production systems.\n- **Disaster Recovery**: Rapidly restoring systems and data using VM snapshots and backups.\n\nIn essence, virtualization enables more efficient use of hardware, improved scalability, and better resource management in IT environments.\n\nTo understand more about the differences between containerization and virtualization, check out the link:\n[Containerization VS Virtualization](https://github.com/NicholasMelito/IS373/wiki/The-Differences-Between-Containerization-&-Virtualization)\n","slug":"Containerization&Virtualization","published":1,"date":"2024-10-16T02:49:57.992Z","updated":"2024-10-16T02:49:57.992Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cm2b9z35300049cv3enrx1hdf","content":"<p>Containerization is a technology that allows you to package applications and their dependencies into isolated units called containers. Here’s a closer look at its key features, benefits, and use cases:</p>\n<h3 id=\"Key-Features-of-Containerization\"><a href=\"#Key-Features-of-Containerization\" class=\"headerlink\" title=\"Key Features of Containerization\"></a>Key Features of Containerization</h3><ol>\n<li><p><strong>Containers</strong>: These are lightweight, executable units that include everything needed to run an application—code, runtime, libraries, and system tools—ensuring that it works consistently across different environments.</p>\n</li>\n<li><p><strong>Shared OS Kernel</strong>: Unlike virtual machines, containers share the host operating system’s kernel. This makes them more efficient in terms of resource usage.</p>\n</li>\n<li><p><strong>Isolation</strong>: Each container runs in its own isolated environment, ensuring that applications do not interfere with one another while still sharing the same OS.</p>\n</li>\n<li><p><strong>Portability</strong>: Containers can run consistently across various environments—development, testing, and production—regardless of the underlying infrastructure.</p>\n</li>\n</ol>\n<p> Benefits of Containerization</p>\n<ul>\n<li><strong>Lightweight</strong>: Containers are smaller and start up faster than virtual machines since they don’t require a full OS for each instance.</li>\n<li><strong>Scalability</strong>: Easy to scale applications up or down quickly, facilitating rapid deployment.</li>\n<li><strong>Efficiency</strong>: Better resource utilization allows more applications to run on the same hardware compared to VMs.</li>\n<li><strong>DevOps Integration</strong>: Containers fit well into continuous integration and continuous deployment (CI&#x2F;CD) workflows, enabling faster development cycles.</li>\n</ul>\n<p> Use Cases</p>\n<ul>\n<li><strong>Microservices Architecture</strong>: Containers are ideal for deploying microservices, where applications are broken down into smaller, independently deployable services.</li>\n<li><strong>Cloud-Native Applications</strong>: Perfect for applications designed to run in cloud environments, leveraging the cloud’s elasticity and scalability.</li>\n<li><strong>Development and Testing</strong>: Developers can create and test applications in consistent environments, reducing “works on my machine” issues.</li>\n<li><strong>Multi-Cloud and Hybrid Environments</strong>: Containers facilitate moving applications seamlessly between different cloud providers and on-premises systems.</li>\n</ul>\n<p> Popular Containerization Tools</p>\n<ul>\n<li><strong>Docker</strong>: The most widely used platform for building, running, and managing containers.</li>\n<li><strong>Kubernetes</strong>: An orchestration tool that automates the deployment, scaling, and management of containerized applications.</li>\n</ul>\n<p>In summary, containerization streamlines application deployment and management by encapsulating applications in lightweight, portable containers, making them ideal for modern software development practices.</p>\n<p>Virtualization is a technology that allows you to create virtual versions of physical computing resources, such as servers, storage devices, and network resources. Here’s a breakdown of its key components and concepts:</p>\n<h3 id=\"Key-Components-of-Virtualization\"><a href=\"#Key-Components-of-Virtualization\" class=\"headerlink\" title=\"Key Components of Virtualization\"></a>Key Components of Virtualization</h3><ol>\n<li><p><strong>Hypervisor</strong>: The core component that enables virtualization. It sits between the hardware and the operating systems, managing VMs. There are two types:</p>\n<ul>\n<li><strong>Type 1 (Bare-metal)</strong>: Runs directly on the hardware (e.g., VMware ESXi, Microsoft Hyper-V).</li>\n<li><strong>Type 2 (Hosted)</strong>: Runs on top of a conventional operating system (e.g., VMware Workstation, Oracle VirtualBox).</li>\n</ul>\n</li>\n<li><p><strong>Virtual Machines (VMs)</strong>: These are isolated environments that act like independent computers. Each VM has its own operating system and applications, but they share the underlying physical hardware.</p>\n</li>\n<li><p><strong>Guest OS</strong>: The operating system running inside a VM. Each VM can run a different OS, allowing for diverse applications on a single physical server.</p>\n</li>\n</ol>\n<p>Benefits of Virtualization</p>\n<ul>\n<li><strong>Resource Efficiency</strong>: Multiple VMs can run on a single physical server, maximizing hardware utilization.</li>\n<li><strong>Isolation</strong>: VMs are isolated from each other, so issues in one VM don’t affect others.</li>\n<li><strong>Scalability</strong>: You can easily create, clone, or delete VMs as needed.</li>\n<li><strong>Cost Savings</strong>: Reduces hardware costs and energy consumption by consolidating servers.</li>\n<li><strong>Flexibility and Portability</strong>: VMs can be moved between hosts and easily backed up or replicated.</li>\n</ul>\n<p> Use Cases</p>\n<ul>\n<li><strong>Server Consolidation</strong>: Running multiple applications on fewer physical servers.</li>\n<li><strong>Development and Testing</strong>: Creating isolated environments for testing software without affecting production systems.</li>\n<li><strong>Disaster Recovery</strong>: Rapidly restoring systems and data using VM snapshots and backups.</li>\n</ul>\n<p>In essence, virtualization enables more efficient use of hardware, improved scalability, and better resource management in IT environments.</p>\n<p>To understand more about the differences between containerization and virtualization, check out the link:<br><a href=\"https://github.com/NicholasMelito/IS373/wiki/The-Differences-Between-Containerization-&-Virtualization\">Containerization VS Virtualization</a></p>\n","excerpt":"","more":"<p>Containerization is a technology that allows you to package applications and their dependencies into isolated units called containers. Here’s a closer look at its key features, benefits, and use cases:</p>\n<h3 id=\"Key-Features-of-Containerization\"><a href=\"#Key-Features-of-Containerization\" class=\"headerlink\" title=\"Key Features of Containerization\"></a>Key Features of Containerization</h3><ol>\n<li><p><strong>Containers</strong>: These are lightweight, executable units that include everything needed to run an application—code, runtime, libraries, and system tools—ensuring that it works consistently across different environments.</p>\n</li>\n<li><p><strong>Shared OS Kernel</strong>: Unlike virtual machines, containers share the host operating system’s kernel. This makes them more efficient in terms of resource usage.</p>\n</li>\n<li><p><strong>Isolation</strong>: Each container runs in its own isolated environment, ensuring that applications do not interfere with one another while still sharing the same OS.</p>\n</li>\n<li><p><strong>Portability</strong>: Containers can run consistently across various environments—development, testing, and production—regardless of the underlying infrastructure.</p>\n</li>\n</ol>\n<p> Benefits of Containerization</p>\n<ul>\n<li><strong>Lightweight</strong>: Containers are smaller and start up faster than virtual machines since they don’t require a full OS for each instance.</li>\n<li><strong>Scalability</strong>: Easy to scale applications up or down quickly, facilitating rapid deployment.</li>\n<li><strong>Efficiency</strong>: Better resource utilization allows more applications to run on the same hardware compared to VMs.</li>\n<li><strong>DevOps Integration</strong>: Containers fit well into continuous integration and continuous deployment (CI&#x2F;CD) workflows, enabling faster development cycles.</li>\n</ul>\n<p> Use Cases</p>\n<ul>\n<li><strong>Microservices Architecture</strong>: Containers are ideal for deploying microservices, where applications are broken down into smaller, independently deployable services.</li>\n<li><strong>Cloud-Native Applications</strong>: Perfect for applications designed to run in cloud environments, leveraging the cloud’s elasticity and scalability.</li>\n<li><strong>Development and Testing</strong>: Developers can create and test applications in consistent environments, reducing “works on my machine” issues.</li>\n<li><strong>Multi-Cloud and Hybrid Environments</strong>: Containers facilitate moving applications seamlessly between different cloud providers and on-premises systems.</li>\n</ul>\n<p> Popular Containerization Tools</p>\n<ul>\n<li><strong>Docker</strong>: The most widely used platform for building, running, and managing containers.</li>\n<li><strong>Kubernetes</strong>: An orchestration tool that automates the deployment, scaling, and management of containerized applications.</li>\n</ul>\n<p>In summary, containerization streamlines application deployment and management by encapsulating applications in lightweight, portable containers, making them ideal for modern software development practices.</p>\n<p>Virtualization is a technology that allows you to create virtual versions of physical computing resources, such as servers, storage devices, and network resources. Here’s a breakdown of its key components and concepts:</p>\n<h3 id=\"Key-Components-of-Virtualization\"><a href=\"#Key-Components-of-Virtualization\" class=\"headerlink\" title=\"Key Components of Virtualization\"></a>Key Components of Virtualization</h3><ol>\n<li><p><strong>Hypervisor</strong>: The core component that enables virtualization. It sits between the hardware and the operating systems, managing VMs. There are two types:</p>\n<ul>\n<li><strong>Type 1 (Bare-metal)</strong>: Runs directly on the hardware (e.g., VMware ESXi, Microsoft Hyper-V).</li>\n<li><strong>Type 2 (Hosted)</strong>: Runs on top of a conventional operating system (e.g., VMware Workstation, Oracle VirtualBox).</li>\n</ul>\n</li>\n<li><p><strong>Virtual Machines (VMs)</strong>: These are isolated environments that act like independent computers. Each VM has its own operating system and applications, but they share the underlying physical hardware.</p>\n</li>\n<li><p><strong>Guest OS</strong>: The operating system running inside a VM. Each VM can run a different OS, allowing for diverse applications on a single physical server.</p>\n</li>\n</ol>\n<p>Benefits of Virtualization</p>\n<ul>\n<li><strong>Resource Efficiency</strong>: Multiple VMs can run on a single physical server, maximizing hardware utilization.</li>\n<li><strong>Isolation</strong>: VMs are isolated from each other, so issues in one VM don’t affect others.</li>\n<li><strong>Scalability</strong>: You can easily create, clone, or delete VMs as needed.</li>\n<li><strong>Cost Savings</strong>: Reduces hardware costs and energy consumption by consolidating servers.</li>\n<li><strong>Flexibility and Portability</strong>: VMs can be moved between hosts and easily backed up or replicated.</li>\n</ul>\n<p> Use Cases</p>\n<ul>\n<li><strong>Server Consolidation</strong>: Running multiple applications on fewer physical servers.</li>\n<li><strong>Development and Testing</strong>: Creating isolated environments for testing software without affecting production systems.</li>\n<li><strong>Disaster Recovery</strong>: Rapidly restoring systems and data using VM snapshots and backups.</li>\n</ul>\n<p>In essence, virtualization enables more efficient use of hardware, improved scalability, and better resource management in IT environments.</p>\n<p>To understand more about the differences between containerization and virtualization, check out the link:<br><a href=\"https://github.com/NicholasMelito/IS373/wiki/The-Differences-Between-Containerization-&-Virtualization\">Containerization VS Virtualization</a></p>\n"},{"_content":"https://hub.docker.com/u/pduarte2\n","source":"_posts/docker.md","raw":"https://hub.docker.com/u/pduarte2\n","slug":"docker","published":1,"date":"2024-10-16T02:49:57.992Z","updated":"2024-10-16T02:49:57.992Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cm2b9z35300059cv33pr00hzl","content":"<p><a href=\"https://hub.docker.com/u/pduarte2\">https://hub.docker.com/u/pduarte2</a></p>\n","excerpt":"","more":"<p><a href=\"https://hub.docker.com/u/pduarte2\">https://hub.docker.com/u/pduarte2</a></p>\n"},{"_content":"**Docker** is a platform that enables developers to automate the deployment, scaling, and management of applications in containers. It allows you to package an application and its dependencies into a single container, ensuring consistent performance across different environments.\n\n### Key Features of Docker\n- **Containerization**: Create and manage containers easily.\n- **Portability**: Run containers on any system that supports Docker, regardless of the underlying environment.\n- **Isolation**: Containers run in isolation, preventing conflicts between applications.\n- **Ecosystem**: Extensive tools and services, including Docker Hub for sharing containers.\n\n![Docker Logo](https://blog.codewithdan.com/wp-content/uploads/2023/06/Docker-Logo.png)\n\n### Installing Docker\n\nThe installation process varies depending on your operating system. Here’s a general guide for the most common platforms:\n\n#### For Windows:\n\n1. **Download Docker Desktop**:\n   - Go to the [Docker Desktop download page](https://www.docker.com/products/docker-desktop).\n   \n2. **Install Docker Desktop**:\n   - Run the downloaded installer.\n   - Follow the installation instructions. You might need to enable WSL 2 (Windows Subsystem for Linux) if prompted.\n\n3. **Start Docker**:\n   - After installation, launch Docker Desktop from the Start menu.\n   - Ensure Docker is running by checking the system tray for the Docker icon.\n\n#### For macOS:\n\n1. **Download Docker Desktop**:\n   - Visit the [Docker Desktop download page](https://www.docker.com/products/docker-desktop).\n\n2. **Install Docker Desktop**:\n   - Open the downloaded `.dmg` file.\n   - Drag the Docker icon to the Applications folder.\n\n3. **Start Docker**:\n   - Launch Docker from the Applications folder.\n   - Verify that Docker is running by checking the menu bar for the Docker icon.\n\n#### For Linux:\n\nThe installation process may vary slightly depending on your distribution. Below are the steps for **Ubuntu**:\n\n1. **Update the Package Index**:\n   ```bash\n   sudo apt-get update\n   ```\n\n2. **Install Required Packages**:\n   ```bash\n   sudo apt-get install apt-transport-https ca-certificates curl software-properties-common\n   ```\n\n3. **Add Docker’s Official GPG Key**:\n   ```bash\n   curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n   ```\n\n4. **Set Up the Stable Repository**:\n   ```bash\n   sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n   ```\n\n5. **Update the Package Index Again**:\n   ```bash\n   sudo apt-get update\n   ```\n\n6. **Install Docker CE (Community Edition)**:\n   ```bash\n   sudo apt-get install docker-ce\n   ```\n\n7. **Start Docker**:\n   ```bash\n   sudo systemctl start docker\n   ```\n\n8. **Enable Docker to Start on Boot**:\n   ```bash\n   sudo systemctl enable docker\n   ```\n\n9. **Verify Installation**:\n   Run the following command to ensure Docker is installed correctly:\n   ```bash\n   docker --version\n   ```\n\n### Post-Installation Steps\nAfter installation, you may want to run Docker as a non-root user. To do this:\n\n1. **Add Your User to the Docker Group**:\n   ```bash\n   sudo usermod -aG docker $USER\n   ```\n\n2. **Log out and back in** for the group changes to take effect.\n\n### Running a Test Container\nTo verify that Docker is working correctly, you can run a test container:\n\n```bash\ndocker run hello-world\n```\n\nThis command pulls a test image and runs it, displaying a message confirming that Docker is installed correctly.\n\nNow you're all set up with Docker! If you have any questions or need further assistance, feel free to ask.\n[What is Kubernetes?](https://github.com/NicholasMelito/IS373/wiki/What-is-Kubernetes-and-can-i-install-on-my-pc%3F)\n","source":"_posts/What_is_Docker.md","raw":"**Docker** is a platform that enables developers to automate the deployment, scaling, and management of applications in containers. It allows you to package an application and its dependencies into a single container, ensuring consistent performance across different environments.\n\n### Key Features of Docker\n- **Containerization**: Create and manage containers easily.\n- **Portability**: Run containers on any system that supports Docker, regardless of the underlying environment.\n- **Isolation**: Containers run in isolation, preventing conflicts between applications.\n- **Ecosystem**: Extensive tools and services, including Docker Hub for sharing containers.\n\n![Docker Logo](https://blog.codewithdan.com/wp-content/uploads/2023/06/Docker-Logo.png)\n\n### Installing Docker\n\nThe installation process varies depending on your operating system. Here’s a general guide for the most common platforms:\n\n#### For Windows:\n\n1. **Download Docker Desktop**:\n   - Go to the [Docker Desktop download page](https://www.docker.com/products/docker-desktop).\n   \n2. **Install Docker Desktop**:\n   - Run the downloaded installer.\n   - Follow the installation instructions. You might need to enable WSL 2 (Windows Subsystem for Linux) if prompted.\n\n3. **Start Docker**:\n   - After installation, launch Docker Desktop from the Start menu.\n   - Ensure Docker is running by checking the system tray for the Docker icon.\n\n#### For macOS:\n\n1. **Download Docker Desktop**:\n   - Visit the [Docker Desktop download page](https://www.docker.com/products/docker-desktop).\n\n2. **Install Docker Desktop**:\n   - Open the downloaded `.dmg` file.\n   - Drag the Docker icon to the Applications folder.\n\n3. **Start Docker**:\n   - Launch Docker from the Applications folder.\n   - Verify that Docker is running by checking the menu bar for the Docker icon.\n\n#### For Linux:\n\nThe installation process may vary slightly depending on your distribution. Below are the steps for **Ubuntu**:\n\n1. **Update the Package Index**:\n   ```bash\n   sudo apt-get update\n   ```\n\n2. **Install Required Packages**:\n   ```bash\n   sudo apt-get install apt-transport-https ca-certificates curl software-properties-common\n   ```\n\n3. **Add Docker’s Official GPG Key**:\n   ```bash\n   curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n   ```\n\n4. **Set Up the Stable Repository**:\n   ```bash\n   sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n   ```\n\n5. **Update the Package Index Again**:\n   ```bash\n   sudo apt-get update\n   ```\n\n6. **Install Docker CE (Community Edition)**:\n   ```bash\n   sudo apt-get install docker-ce\n   ```\n\n7. **Start Docker**:\n   ```bash\n   sudo systemctl start docker\n   ```\n\n8. **Enable Docker to Start on Boot**:\n   ```bash\n   sudo systemctl enable docker\n   ```\n\n9. **Verify Installation**:\n   Run the following command to ensure Docker is installed correctly:\n   ```bash\n   docker --version\n   ```\n\n### Post-Installation Steps\nAfter installation, you may want to run Docker as a non-root user. To do this:\n\n1. **Add Your User to the Docker Group**:\n   ```bash\n   sudo usermod -aG docker $USER\n   ```\n\n2. **Log out and back in** for the group changes to take effect.\n\n### Running a Test Container\nTo verify that Docker is working correctly, you can run a test container:\n\n```bash\ndocker run hello-world\n```\n\nThis command pulls a test image and runs it, displaying a message confirming that Docker is installed correctly.\n\nNow you're all set up with Docker! If you have any questions or need further assistance, feel free to ask.\n[What is Kubernetes?](https://github.com/NicholasMelito/IS373/wiki/What-is-Kubernetes-and-can-i-install-on-my-pc%3F)\n","slug":"What_is_Docker","published":1,"date":"2024-10-16T02:49:57.992Z","updated":"2024-10-16T02:49:57.992Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cm2b9z35400069cv3hfgj5n1v","content":"<p><strong>Docker</strong> is a platform that enables developers to automate the deployment, scaling, and management of applications in containers. It allows you to package an application and its dependencies into a single container, ensuring consistent performance across different environments.</p>\n<h3 id=\"Key-Features-of-Docker\"><a href=\"#Key-Features-of-Docker\" class=\"headerlink\" title=\"Key Features of Docker\"></a>Key Features of Docker</h3><ul>\n<li><strong>Containerization</strong>: Create and manage containers easily.</li>\n<li><strong>Portability</strong>: Run containers on any system that supports Docker, regardless of the underlying environment.</li>\n<li><strong>Isolation</strong>: Containers run in isolation, preventing conflicts between applications.</li>\n<li><strong>Ecosystem</strong>: Extensive tools and services, including Docker Hub for sharing containers.</li>\n</ul>\n<p><img src=\"https://blog.codewithdan.com/wp-content/uploads/2023/06/Docker-Logo.png\" alt=\"Docker Logo\"></p>\n<h3 id=\"Installing-Docker\"><a href=\"#Installing-Docker\" class=\"headerlink\" title=\"Installing Docker\"></a>Installing Docker</h3><p>The installation process varies depending on your operating system. Here’s a general guide for the most common platforms:</p>\n<h4 id=\"For-Windows\"><a href=\"#For-Windows\" class=\"headerlink\" title=\"For Windows:\"></a>For Windows:</h4><ol>\n<li><p><strong>Download Docker Desktop</strong>:</p>\n<ul>\n<li>Go to the <a href=\"https://www.docker.com/products/docker-desktop\">Docker Desktop download page</a>.</li>\n</ul>\n</li>\n<li><p><strong>Install Docker Desktop</strong>:</p>\n<ul>\n<li>Run the downloaded installer.</li>\n<li>Follow the installation instructions. You might need to enable WSL 2 (Windows Subsystem for Linux) if prompted.</li>\n</ul>\n</li>\n<li><p><strong>Start Docker</strong>:</p>\n<ul>\n<li>After installation, launch Docker Desktop from the Start menu.</li>\n<li>Ensure Docker is running by checking the system tray for the Docker icon.</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"For-macOS\"><a href=\"#For-macOS\" class=\"headerlink\" title=\"For macOS:\"></a>For macOS:</h4><ol>\n<li><p><strong>Download Docker Desktop</strong>:</p>\n<ul>\n<li>Visit the <a href=\"https://www.docker.com/products/docker-desktop\">Docker Desktop download page</a>.</li>\n</ul>\n</li>\n<li><p><strong>Install Docker Desktop</strong>:</p>\n<ul>\n<li>Open the downloaded <code>.dmg</code> file.</li>\n<li>Drag the Docker icon to the Applications folder.</li>\n</ul>\n</li>\n<li><p><strong>Start Docker</strong>:</p>\n<ul>\n<li>Launch Docker from the Applications folder.</li>\n<li>Verify that Docker is running by checking the menu bar for the Docker icon.</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"For-Linux\"><a href=\"#For-Linux\" class=\"headerlink\" title=\"For Linux:\"></a>For Linux:</h4><p>The installation process may vary slightly depending on your distribution. Below are the steps for <strong>Ubuntu</strong>:</p>\n<ol>\n<li><p><strong>Update the Package Index</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get update</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Install Required Packages</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Add Docker’s Official GPG Key</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | <span class=\"built_in\">sudo</span> apt-key add -</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Set Up the Stable Repository</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> add-apt-repository <span class=\"string\">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class=\"subst\">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Update the Package Index Again</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get update</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Install Docker CE (Community Edition)</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install docker-ce</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Start Docker</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl start docker</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Enable Docker to Start on Boot</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl <span class=\"built_in\">enable</span> docker</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Verify Installation</strong>:<br>Run the following command to ensure Docker is installed correctly:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker --version</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"Post-Installation-Steps\"><a href=\"#Post-Installation-Steps\" class=\"headerlink\" title=\"Post-Installation Steps\"></a>Post-Installation Steps</h3><p>After installation, you may want to run Docker as a non-root user. To do this:</p>\n<ol>\n<li><p><strong>Add Your User to the Docker Group</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> usermod -aG docker <span class=\"variable\">$USER</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Log out and back in</strong> for the group changes to take effect.</p>\n</li>\n</ol>\n<h3 id=\"Running-a-Test-Container\"><a href=\"#Running-a-Test-Container\" class=\"headerlink\" title=\"Running a Test Container\"></a>Running a Test Container</h3><p>To verify that Docker is working correctly, you can run a test container:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run hello-world</span><br></pre></td></tr></table></figure>\n\n<p>This command pulls a test image and runs it, displaying a message confirming that Docker is installed correctly.</p>\n<p>Now you’re all set up with Docker! If you have any questions or need further assistance, feel free to ask.<br><a href=\"https://github.com/NicholasMelito/IS373/wiki/What-is-Kubernetes-and-can-i-install-on-my-pc%3F\">What is Kubernetes?</a></p>\n","excerpt":"","more":"<p><strong>Docker</strong> is a platform that enables developers to automate the deployment, scaling, and management of applications in containers. It allows you to package an application and its dependencies into a single container, ensuring consistent performance across different environments.</p>\n<h3 id=\"Key-Features-of-Docker\"><a href=\"#Key-Features-of-Docker\" class=\"headerlink\" title=\"Key Features of Docker\"></a>Key Features of Docker</h3><ul>\n<li><strong>Containerization</strong>: Create and manage containers easily.</li>\n<li><strong>Portability</strong>: Run containers on any system that supports Docker, regardless of the underlying environment.</li>\n<li><strong>Isolation</strong>: Containers run in isolation, preventing conflicts between applications.</li>\n<li><strong>Ecosystem</strong>: Extensive tools and services, including Docker Hub for sharing containers.</li>\n</ul>\n<p><img src=\"https://blog.codewithdan.com/wp-content/uploads/2023/06/Docker-Logo.png\" alt=\"Docker Logo\"></p>\n<h3 id=\"Installing-Docker\"><a href=\"#Installing-Docker\" class=\"headerlink\" title=\"Installing Docker\"></a>Installing Docker</h3><p>The installation process varies depending on your operating system. Here’s a general guide for the most common platforms:</p>\n<h4 id=\"For-Windows\"><a href=\"#For-Windows\" class=\"headerlink\" title=\"For Windows:\"></a>For Windows:</h4><ol>\n<li><p><strong>Download Docker Desktop</strong>:</p>\n<ul>\n<li>Go to the <a href=\"https://www.docker.com/products/docker-desktop\">Docker Desktop download page</a>.</li>\n</ul>\n</li>\n<li><p><strong>Install Docker Desktop</strong>:</p>\n<ul>\n<li>Run the downloaded installer.</li>\n<li>Follow the installation instructions. You might need to enable WSL 2 (Windows Subsystem for Linux) if prompted.</li>\n</ul>\n</li>\n<li><p><strong>Start Docker</strong>:</p>\n<ul>\n<li>After installation, launch Docker Desktop from the Start menu.</li>\n<li>Ensure Docker is running by checking the system tray for the Docker icon.</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"For-macOS\"><a href=\"#For-macOS\" class=\"headerlink\" title=\"For macOS:\"></a>For macOS:</h4><ol>\n<li><p><strong>Download Docker Desktop</strong>:</p>\n<ul>\n<li>Visit the <a href=\"https://www.docker.com/products/docker-desktop\">Docker Desktop download page</a>.</li>\n</ul>\n</li>\n<li><p><strong>Install Docker Desktop</strong>:</p>\n<ul>\n<li>Open the downloaded <code>.dmg</code> file.</li>\n<li>Drag the Docker icon to the Applications folder.</li>\n</ul>\n</li>\n<li><p><strong>Start Docker</strong>:</p>\n<ul>\n<li>Launch Docker from the Applications folder.</li>\n<li>Verify that Docker is running by checking the menu bar for the Docker icon.</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"For-Linux\"><a href=\"#For-Linux\" class=\"headerlink\" title=\"For Linux:\"></a>For Linux:</h4><p>The installation process may vary slightly depending on your distribution. Below are the steps for <strong>Ubuntu</strong>:</p>\n<ol>\n<li><p><strong>Update the Package Index</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get update</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Install Required Packages</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Add Docker’s Official GPG Key</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | <span class=\"built_in\">sudo</span> apt-key add -</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Set Up the Stable Repository</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> add-apt-repository <span class=\"string\">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class=\"subst\">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Update the Package Index Again</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get update</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Install Docker CE (Community Edition)</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install docker-ce</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Start Docker</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl start docker</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Enable Docker to Start on Boot</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl <span class=\"built_in\">enable</span> docker</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Verify Installation</strong>:<br>Run the following command to ensure Docker is installed correctly:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker --version</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"Post-Installation-Steps\"><a href=\"#Post-Installation-Steps\" class=\"headerlink\" title=\"Post-Installation Steps\"></a>Post-Installation Steps</h3><p>After installation, you may want to run Docker as a non-root user. To do this:</p>\n<ol>\n<li><p><strong>Add Your User to the Docker Group</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> usermod -aG docker <span class=\"variable\">$USER</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Log out and back in</strong> for the group changes to take effect.</p>\n</li>\n</ol>\n<h3 id=\"Running-a-Test-Container\"><a href=\"#Running-a-Test-Container\" class=\"headerlink\" title=\"Running a Test Container\"></a>Running a Test Container</h3><p>To verify that Docker is working correctly, you can run a test container:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run hello-world</span><br></pre></td></tr></table></figure>\n\n<p>This command pulls a test image and runs it, displaying a message confirming that Docker is installed correctly.</p>\n<p>Now you’re all set up with Docker! If you have any questions or need further assistance, feel free to ask.<br><a href=\"https://github.com/NicholasMelito/IS373/wiki/What-is-Kubernetes-and-can-i-install-on-my-pc%3F\">What is Kubernetes?</a></p>\n"},{"_content":"**Kubernetes** (often abbreviated as K8s) is an open-source container orchestration platform designed to automate the deployment, scaling, and management of containerized applications. It provides a framework to run distributed systems resiliently, offering features like load balancing, self-healing, scaling, and rolling updates.\n\n### Key Features of Kubernetes\n- **Automated Deployment**: Easily deploy applications in containers across clusters of machines.\n- **Scaling**: Automatically scale applications up or down based on demand.\n- **Self-Healing**: Automatically restart failed containers and replace or reschedule containers when nodes die.\n- **Load Balancing**: Distribute network traffic efficiently to ensure application availability.\n- **Service Discovery**: Automatically assign IP addresses and a single DNS name for a set of containers.\n\n![Kubernetes Logo](https://sp-ao.shortpixel.ai/client/to_auto,q_lossy,ret_img,w_1024/https://concisesoftware.com/wp-content/uploads/2020/01/Kubernetes-logo-1024x576.png)\n\n### Installing Kubernetes on Your PC\n\nYou can install Kubernetes locally using tools like **Minikube** or **Docker Desktop**. Here's how to do it with both methods:\n\n#### Method 1: Using Minikube\n\n**Minikube** is a tool that runs a single-node Kubernetes cluster on your local machine.\n\n1. **Install Minikube**:\n   - Follow the instructions on the [Minikube installation page](https://minikube.sigs.k8s.io/docs/start/). This typically involves downloading a binary and placing it in your PATH.\n\n2. **Install a Hypervisor**:\n   - Minikube requires a hypervisor. You can use VirtualBox, HyperKit (macOS), or Hyper-V (Windows).\n   - Ensure your system has virtualization enabled in the BIOS.\n\n3. **Start Minikube**:\n   Open your terminal and run:\n   ```bash\n   minikube start\n   ```\n\n4. **Verify Installation**:\n   Once Minikube is running, you can check the status with:\n   ```bash\n   minikube status\n   ```\n\n5. **Access Kubernetes Dashboard (optional)**:\n   To access the Kubernetes dashboard, run:\n   ```bash\n   minikube dashboard\n   ```\n\n#### Method 2: Using Docker Desktop\n\nIf you have Docker Desktop installed, you can enable the Kubernetes feature built into Docker.\n\n1. **Enable Kubernetes**:\n   - Open Docker Desktop and go to **Settings**.\n   - Navigate to the **Kubernetes** tab.\n   - Check the box for \"Enable Kubernetes.\"\n   - Click **Apply & Restart**.\n\n2. **Verify Installation**:\n   Open a terminal and run:\n   ```bash\n   kubectl version\n   ```\n\n   This command checks the installed version of `kubectl`, the command-line tool for interacting with Kubernetes.\n\n### Running a Test Application\n\nOnce Kubernetes is installed, you can deploy a simple application to test it. Here’s an example using a basic nginx web server:\n\n```bash\nkubectl create deployment nginx --image=nginx\nkubectl expose deployment nginx --port=80 --type=NodePort\n```\n\nYou can check the status of your pods with:\n\n```bash\nkubectl get pods\n```\n\n### Conclusion\n\nBoth Minikube and Docker Desktop provide convenient ways to run Kubernetes locally, allowing you to develop and test applications before deploying them to production. If you have any specific questions or need further guidance, feel free to ask!\n[Docker VS Kubernetes](https://github.com/NicholasMelito/IS373/wiki/What-is-the-difference-between-Kubernetes-and-Docker%3F%3F)\n","source":"_posts/What_Is_Kubernetes.md","raw":"**Kubernetes** (often abbreviated as K8s) is an open-source container orchestration platform designed to automate the deployment, scaling, and management of containerized applications. It provides a framework to run distributed systems resiliently, offering features like load balancing, self-healing, scaling, and rolling updates.\n\n### Key Features of Kubernetes\n- **Automated Deployment**: Easily deploy applications in containers across clusters of machines.\n- **Scaling**: Automatically scale applications up or down based on demand.\n- **Self-Healing**: Automatically restart failed containers and replace or reschedule containers when nodes die.\n- **Load Balancing**: Distribute network traffic efficiently to ensure application availability.\n- **Service Discovery**: Automatically assign IP addresses and a single DNS name for a set of containers.\n\n![Kubernetes Logo](https://sp-ao.shortpixel.ai/client/to_auto,q_lossy,ret_img,w_1024/https://concisesoftware.com/wp-content/uploads/2020/01/Kubernetes-logo-1024x576.png)\n\n### Installing Kubernetes on Your PC\n\nYou can install Kubernetes locally using tools like **Minikube** or **Docker Desktop**. Here's how to do it with both methods:\n\n#### Method 1: Using Minikube\n\n**Minikube** is a tool that runs a single-node Kubernetes cluster on your local machine.\n\n1. **Install Minikube**:\n   - Follow the instructions on the [Minikube installation page](https://minikube.sigs.k8s.io/docs/start/). This typically involves downloading a binary and placing it in your PATH.\n\n2. **Install a Hypervisor**:\n   - Minikube requires a hypervisor. You can use VirtualBox, HyperKit (macOS), or Hyper-V (Windows).\n   - Ensure your system has virtualization enabled in the BIOS.\n\n3. **Start Minikube**:\n   Open your terminal and run:\n   ```bash\n   minikube start\n   ```\n\n4. **Verify Installation**:\n   Once Minikube is running, you can check the status with:\n   ```bash\n   minikube status\n   ```\n\n5. **Access Kubernetes Dashboard (optional)**:\n   To access the Kubernetes dashboard, run:\n   ```bash\n   minikube dashboard\n   ```\n\n#### Method 2: Using Docker Desktop\n\nIf you have Docker Desktop installed, you can enable the Kubernetes feature built into Docker.\n\n1. **Enable Kubernetes**:\n   - Open Docker Desktop and go to **Settings**.\n   - Navigate to the **Kubernetes** tab.\n   - Check the box for \"Enable Kubernetes.\"\n   - Click **Apply & Restart**.\n\n2. **Verify Installation**:\n   Open a terminal and run:\n   ```bash\n   kubectl version\n   ```\n\n   This command checks the installed version of `kubectl`, the command-line tool for interacting with Kubernetes.\n\n### Running a Test Application\n\nOnce Kubernetes is installed, you can deploy a simple application to test it. Here’s an example using a basic nginx web server:\n\n```bash\nkubectl create deployment nginx --image=nginx\nkubectl expose deployment nginx --port=80 --type=NodePort\n```\n\nYou can check the status of your pods with:\n\n```bash\nkubectl get pods\n```\n\n### Conclusion\n\nBoth Minikube and Docker Desktop provide convenient ways to run Kubernetes locally, allowing you to develop and test applications before deploying them to production. If you have any specific questions or need further guidance, feel free to ask!\n[Docker VS Kubernetes](https://github.com/NicholasMelito/IS373/wiki/What-is-the-difference-between-Kubernetes-and-Docker%3F%3F)\n","slug":"What_Is_Kubernetes","published":1,"date":"2024-10-16T02:49:57.992Z","updated":"2024-10-16T02:49:57.992Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cm2b9z35400079cv3dx669pfb","content":"<p><strong>Kubernetes</strong> (often abbreviated as K8s) is an open-source container orchestration platform designed to automate the deployment, scaling, and management of containerized applications. It provides a framework to run distributed systems resiliently, offering features like load balancing, self-healing, scaling, and rolling updates.</p>\n<h3 id=\"Key-Features-of-Kubernetes\"><a href=\"#Key-Features-of-Kubernetes\" class=\"headerlink\" title=\"Key Features of Kubernetes\"></a>Key Features of Kubernetes</h3><ul>\n<li><strong>Automated Deployment</strong>: Easily deploy applications in containers across clusters of machines.</li>\n<li><strong>Scaling</strong>: Automatically scale applications up or down based on demand.</li>\n<li><strong>Self-Healing</strong>: Automatically restart failed containers and replace or reschedule containers when nodes die.</li>\n<li><strong>Load Balancing</strong>: Distribute network traffic efficiently to ensure application availability.</li>\n<li><strong>Service Discovery</strong>: Automatically assign IP addresses and a single DNS name for a set of containers.</li>\n</ul>\n<p><img src=\"https://sp-ao.shortpixel.ai/client/to_auto,q_lossy,ret_img,w_1024/https://concisesoftware.com/wp-content/uploads/2020/01/Kubernetes-logo-1024x576.png\" alt=\"Kubernetes Logo\"></p>\n<h3 id=\"Installing-Kubernetes-on-Your-PC\"><a href=\"#Installing-Kubernetes-on-Your-PC\" class=\"headerlink\" title=\"Installing Kubernetes on Your PC\"></a>Installing Kubernetes on Your PC</h3><p>You can install Kubernetes locally using tools like <strong>Minikube</strong> or <strong>Docker Desktop</strong>. Here’s how to do it with both methods:</p>\n<h4 id=\"Method-1-Using-Minikube\"><a href=\"#Method-1-Using-Minikube\" class=\"headerlink\" title=\"Method 1: Using Minikube\"></a>Method 1: Using Minikube</h4><p><strong>Minikube</strong> is a tool that runs a single-node Kubernetes cluster on your local machine.</p>\n<ol>\n<li><p><strong>Install Minikube</strong>:</p>\n<ul>\n<li>Follow the instructions on the <a href=\"https://minikube.sigs.k8s.io/docs/start/\">Minikube installation page</a>. This typically involves downloading a binary and placing it in your PATH.</li>\n</ul>\n</li>\n<li><p><strong>Install a Hypervisor</strong>:</p>\n<ul>\n<li>Minikube requires a hypervisor. You can use VirtualBox, HyperKit (macOS), or Hyper-V (Windows).</li>\n<li>Ensure your system has virtualization enabled in the BIOS.</li>\n</ul>\n</li>\n<li><p><strong>Start Minikube</strong>:<br>Open your terminal and run:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">minikube start</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Verify Installation</strong>:<br>Once Minikube is running, you can check the status with:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">minikube status</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Access Kubernetes Dashboard (optional)</strong>:<br>To access the Kubernetes dashboard, run:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">minikube dashboard</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"Method-2-Using-Docker-Desktop\"><a href=\"#Method-2-Using-Docker-Desktop\" class=\"headerlink\" title=\"Method 2: Using Docker Desktop\"></a>Method 2: Using Docker Desktop</h4><p>If you have Docker Desktop installed, you can enable the Kubernetes feature built into Docker.</p>\n<ol>\n<li><p><strong>Enable Kubernetes</strong>:</p>\n<ul>\n<li>Open Docker Desktop and go to <strong>Settings</strong>.</li>\n<li>Navigate to the <strong>Kubernetes</strong> tab.</li>\n<li>Check the box for “Enable Kubernetes.”</li>\n<li>Click <strong>Apply &amp; Restart</strong>.</li>\n</ul>\n</li>\n<li><p><strong>Verify Installation</strong>:<br>Open a terminal and run:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl version</span><br></pre></td></tr></table></figure>\n\n<p>This command checks the installed version of <code>kubectl</code>, the command-line tool for interacting with Kubernetes.</p>\n</li>\n</ol>\n<h3 id=\"Running-a-Test-Application\"><a href=\"#Running-a-Test-Application\" class=\"headerlink\" title=\"Running a Test Application\"></a>Running a Test Application</h3><p>Once Kubernetes is installed, you can deploy a simple application to test it. Here’s an example using a basic nginx web server:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create deployment nginx --image=nginx</span><br><span class=\"line\">kubectl expose deployment nginx --port=80 --<span class=\"built_in\">type</span>=NodePort</span><br></pre></td></tr></table></figure>\n\n<p>You can check the status of your pods with:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get pods</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h3><p>Both Minikube and Docker Desktop provide convenient ways to run Kubernetes locally, allowing you to develop and test applications before deploying them to production. If you have any specific questions or need further guidance, feel free to ask!<br><a href=\"https://github.com/NicholasMelito/IS373/wiki/What-is-the-difference-between-Kubernetes-and-Docker%3F%3F\">Docker VS Kubernetes</a></p>\n","excerpt":"","more":"<p><strong>Kubernetes</strong> (often abbreviated as K8s) is an open-source container orchestration platform designed to automate the deployment, scaling, and management of containerized applications. It provides a framework to run distributed systems resiliently, offering features like load balancing, self-healing, scaling, and rolling updates.</p>\n<h3 id=\"Key-Features-of-Kubernetes\"><a href=\"#Key-Features-of-Kubernetes\" class=\"headerlink\" title=\"Key Features of Kubernetes\"></a>Key Features of Kubernetes</h3><ul>\n<li><strong>Automated Deployment</strong>: Easily deploy applications in containers across clusters of machines.</li>\n<li><strong>Scaling</strong>: Automatically scale applications up or down based on demand.</li>\n<li><strong>Self-Healing</strong>: Automatically restart failed containers and replace or reschedule containers when nodes die.</li>\n<li><strong>Load Balancing</strong>: Distribute network traffic efficiently to ensure application availability.</li>\n<li><strong>Service Discovery</strong>: Automatically assign IP addresses and a single DNS name for a set of containers.</li>\n</ul>\n<p><img src=\"https://sp-ao.shortpixel.ai/client/to_auto,q_lossy,ret_img,w_1024/https://concisesoftware.com/wp-content/uploads/2020/01/Kubernetes-logo-1024x576.png\" alt=\"Kubernetes Logo\"></p>\n<h3 id=\"Installing-Kubernetes-on-Your-PC\"><a href=\"#Installing-Kubernetes-on-Your-PC\" class=\"headerlink\" title=\"Installing Kubernetes on Your PC\"></a>Installing Kubernetes on Your PC</h3><p>You can install Kubernetes locally using tools like <strong>Minikube</strong> or <strong>Docker Desktop</strong>. Here’s how to do it with both methods:</p>\n<h4 id=\"Method-1-Using-Minikube\"><a href=\"#Method-1-Using-Minikube\" class=\"headerlink\" title=\"Method 1: Using Minikube\"></a>Method 1: Using Minikube</h4><p><strong>Minikube</strong> is a tool that runs a single-node Kubernetes cluster on your local machine.</p>\n<ol>\n<li><p><strong>Install Minikube</strong>:</p>\n<ul>\n<li>Follow the instructions on the <a href=\"https://minikube.sigs.k8s.io/docs/start/\">Minikube installation page</a>. This typically involves downloading a binary and placing it in your PATH.</li>\n</ul>\n</li>\n<li><p><strong>Install a Hypervisor</strong>:</p>\n<ul>\n<li>Minikube requires a hypervisor. You can use VirtualBox, HyperKit (macOS), or Hyper-V (Windows).</li>\n<li>Ensure your system has virtualization enabled in the BIOS.</li>\n</ul>\n</li>\n<li><p><strong>Start Minikube</strong>:<br>Open your terminal and run:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">minikube start</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Verify Installation</strong>:<br>Once Minikube is running, you can check the status with:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">minikube status</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Access Kubernetes Dashboard (optional)</strong>:<br>To access the Kubernetes dashboard, run:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">minikube dashboard</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"Method-2-Using-Docker-Desktop\"><a href=\"#Method-2-Using-Docker-Desktop\" class=\"headerlink\" title=\"Method 2: Using Docker Desktop\"></a>Method 2: Using Docker Desktop</h4><p>If you have Docker Desktop installed, you can enable the Kubernetes feature built into Docker.</p>\n<ol>\n<li><p><strong>Enable Kubernetes</strong>:</p>\n<ul>\n<li>Open Docker Desktop and go to <strong>Settings</strong>.</li>\n<li>Navigate to the <strong>Kubernetes</strong> tab.</li>\n<li>Check the box for “Enable Kubernetes.”</li>\n<li>Click <strong>Apply &amp; Restart</strong>.</li>\n</ul>\n</li>\n<li><p><strong>Verify Installation</strong>:<br>Open a terminal and run:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl version</span><br></pre></td></tr></table></figure>\n\n<p>This command checks the installed version of <code>kubectl</code>, the command-line tool for interacting with Kubernetes.</p>\n</li>\n</ol>\n<h3 id=\"Running-a-Test-Application\"><a href=\"#Running-a-Test-Application\" class=\"headerlink\" title=\"Running a Test Application\"></a>Running a Test Application</h3><p>Once Kubernetes is installed, you can deploy a simple application to test it. Here’s an example using a basic nginx web server:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create deployment nginx --image=nginx</span><br><span class=\"line\">kubectl expose deployment nginx --port=80 --<span class=\"built_in\">type</span>=NodePort</span><br></pre></td></tr></table></figure>\n\n<p>You can check the status of your pods with:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get pods</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h3><p>Both Minikube and Docker Desktop provide convenient ways to run Kubernetes locally, allowing you to develop and test applications before deploying them to production. If you have any specific questions or need further guidance, feel free to ask!<br><a href=\"https://github.com/NicholasMelito/IS373/wiki/What-is-the-difference-between-Kubernetes-and-Docker%3F%3F\">Docker VS Kubernetes</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}